
    """TASK 4
PRODIGY INFOTECH
Implement a Sudoku Solver
Create a program that solves Sudoku puzzles automatically. The program should
take an input grid representing an unsolved Sudoku puzzle and use an algorithm
to fill in the missing numbers.
It should use backtracking or other suitable techniques to explore possible
solutions and find the correct arrangement of numbers for the puzzle.
Once solved, the program should display the completed Sudoku grid."""


def print_grid(grid):
    for row in grid:
        print(" ".join(str(num) if num != 0 else '.' for num in row))

def find_empty_location(grid, l):
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                l[0], l[1] = row, col
                return True
    return False

def used_in_row(grid, row, num):
    return any(grid[row][col] == num for col in range(9))

def used_in_col(grid, col, num):
    return any(grid[row][col] == num for row in range(9))

def used_in_box(grid, box_start_row, box_start_col, num):
    return any(grid[i][j] == num for i in range(box_start_row, box_start_row + 3) for j in range(box_start_col, box_start_col + 3))

def check_location_is_safe(grid, row, col, num):
    return not used_in_row(grid, row, num) and not used_in_col(grid, col, num) and not used_in_box(grid, row - row % 3, col - col % 3, num)

def solve_sudoku(grid):
    l = [0, 0]
    if not find_empty_location(grid, l):
        return True

    row, col = l
    for num in range(1, 10):
        if check_location_is_safe(grid, row, col, num):
            grid[row][col] = num
            if solve_sudoku(grid):
                return True
            grid[row][col] = 0

    return False

# Example unsolved Sudoku grid (0 represents empty cells)
unsolved_grid = [
    [2, 4, 9, 0, 7, 6, 0, 0, 0],
    [8, 3, 0, 0, 0, 0, 0, 6, 9],
    [0, 0, 0, 0, 0, 9, 5, 2, 0],
    [3, 6, 0, 2, 4, 0, 0, 5, 0],
    [0, 9, 0, 0, 5, 0, 4, 1, 0],
    [0, 5, 4, 6, 0, 0, 0, 3, 0],
    [0, 1, 6, 9, 0, 0, 2, 0, 8],
    [0, 0, 7, 1, 6, 8, 0, 0, 5],
    [9, 0, 0, 0, 0, 5, 0, 0, 1]
]

print("Unsolved Sudoku grid:")
print_grid(unsolved_grid)

if solve_sudoku(unsolved_grid):
    print("\nSolved Sudoku grid:")
    print_grid(unsolved_grid)
else:
    print("No solution exists")
